class Solution {
    // 动态规划，定义一个 dp 数组，长度为 n + 1
    // dp[n] 表示从 1 到 n 组成的二叉搜索树数量
    // f(i, n)表示从 1 到 n 中，以 i 为根节点组成的二叉树数量
    // 那么 dp[n] 就为 从 1 到 n 中，以每个数字作为根节点的二叉树数量之和
    // 也就是 dp[n] = f(1, n) + f(2, n) + ....... + f(n, n)
    // 按照二叉搜索数的性质，f(i, n)是以 i 为根节点，那么 f(i, n) 的求法就为：
    // dp[i - 1] * dp[n - i]，也就是 i 的左子树组合乘以 i 的右子树组合
    // 因为 i 的左子树组合中的数都是小于 i ，所以左子树组合就为 dp[i - 1]，右子树同理
    public int numTrees(int n) {
        if (n == 0 || n == 1) {
            return n;
        }
        int[] dp = new int[n + 1];
        // 初始化
        dp[0] = 1;
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            // 计算从 1 到 i 的 f(i, n) 之和就为 dp[i]
            for (int j = 1; j <= i; j++) {
                dp[i] += dp[j - 1] * dp[i - j];
            }
        }
        return dp[n];
    }
}
