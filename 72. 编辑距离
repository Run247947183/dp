class Solution {
    // 动态规划
    // 状态：dp[i][j] 表示 word1 前 i 个字母和 word2 前 j 个字母相同所需的最小操作数
    // 状态转移方程：首先明确如果删除一个字母再添加一个相同的字母，比起更换操作次数多
    // 所以在比较的过程中不会使用到删除
    // 那么就需要判断增加一个字母和更换一个字母谁次数少
    // （1）增加字母：需要从 dp[i - 1][j] 和 dp[i][j - 1] 两者选出最少次数，然后 + 1
    // + 1 就是新增一个字母
    // （2）更换字母：首先判断当前位置的字母相同与否，如果两个字符串当前字母相同
    // 则只需要判断 dp[i][j] 和 dp[i - 1][j - 1] 的最小值即可，无需更换
    // 如果不相同，则需要增加一次操作次数，所以最小值为：min(dp[i][j],dp[i-1][j-1] + 1)
    public int minDistance(String word1, String word2) {
        int len1 = word1.length();
        int len2 = word2.length();
        if (word1 == null) {
            return len2;
        }
        if (word2 == null) {
            return len1;
        }
        int[][] dp = new int[len1 + 1][len2 + 1];
        for (int i = 0; i <= len1; i++) {
            dp[i][0] = i;
        }
        for (int i = 0; i <= len2; i++) {
            dp[0][i] = i;
        }
        for (int i = 1; i <= len1; i++) {
            for (int j = 1; j <= len2; j++) {
                // 先判断为：增加一个相同的字母所需的最小次数
                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;
                // 再根据当前位置字符相同与否，来判断最小次数
                if (word1.charAt(i - 1) == word2.charAt(j - 1)) {
                    // 当前情况为两个字母相同，则只需要判断两者前一个位置即可
                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j - 1]);
                } else {
                    // 不相同，则需要增加一次更换的次数
                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j - 1] + 1);
                }
            }
        }
        return dp[len1][len2];
    }
}
