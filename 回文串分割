# dp
动态规划
public class Solution {
    // 动态规划
    // dp[i] 表示从 0 到 i 个字符位置时，最小的切割成回文串的次数
    // 初始化：dp[i] = i - 1，例如第一个字符切割成回文串为 0 次，当个字母本身就为回文串
    // 例如：从 0 到第三个字符时，需要切割成回文串的最大次数为 i - 1，也就是 2 次
    // 转移方程：判断当前位置是不是回文串，需要判断前一个位置是不是回文串，如果是的话就 + 1
    public int minCut(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        int len = s.length();
        int[] dp = new int[len + 1];
        for (int i = 0; i <= len; i++) {
            dp[i] = i - 1;
        }
        for (int i = 1; i <= len; i++) {
            for (int j = 0; j < i; j++) {
                if (isTure(s, j, i - 1)) {
                    dp[i] = Math.min(dp[i], dp[j] + 1);
                }
            }
        }
        return dp[len];
    }
    // 判断从 left 到 right 位置是不是回文串
    public boolean isTure(String s, int left, int right) {
        while (left < right) {
            if (s.charAt(left) != s.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}
