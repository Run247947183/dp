# dp
动态规划
class Solution {
    // 动态规划
    // 拆分成首位房子不连接的简单打家劫舍问题来解决
    // 分别计算出从 1 到 len 位置的最大值，和从 0 到 len - 1 位置的最大值
    // 这样就能避免第一个房子和最后个房子相连接引起的报警器问题
    public int rob(int[] nums) {
        int len = nums.length;
        if (nums == null || len == 0) {
            return 0;
        }
        if (len == 1) {
            return nums[0];
        }
        int one = helper(Arrays.copyOfRange(nums, 0, len - 1));
        int two = helper(Arrays.copyOfRange(nums, 1, len));
        return Math.max(one, two);
    }
    public int helper(int[] nums) {
        int[] dp = new int[nums.length + 1];
        dp[1] = nums[0];
        for (int i = 1; i < nums.length; i++) {
            dp[i + 1] = Math.max((nums[i] + dp[i - 1]), dp[i]);
        }
        return dp[nums.length];
    }
}
