# dp
动态规划
class Solution {
    // 动态规划
    // dp[i][j]表示s1前i个字母和s2前j个字母能够交错组成s3前i+j个字母
    // 如果s1当前i字母和s3当前i+j个字母相同，则判断s1中前i-1个字母和s2中前j个字母能不能交错组成s3中i+j-1个字母，如果可以，则表示dp[i][j]为true
    // 类似的s2的j个字母也和s3中i+j个字母比较    
    public boolean isInterleave(String s1, String s2, String s3) {
        int len1 = s1.length();
        int len2 = s2.length();
        int len3 = s3.length();
        if (len1 + len2 != len3) {
            return false;
        }
        boolean[][] dp = new boolean[len1 + 1][len2 + 1];
        dp[0][0] = true;
        for (int i = 0; i <= len1; i++) {
            for (int j = 0; j <= len2; j++) {
                int pos = i + j - 1;
                if (i > 0) {
                    dp[i][j] = dp[i][j] || 
                    (dp[i - 1][j] && s1.charAt(i - 1) == s3.charAt(pos));
                }
                if (j > 0) {
                    dp[i][j] = dp[i][j] ||
                    (dp[i][j - 1] && s2.charAt(j - 1) == s3.charAt(pos));
                }
            }
        }
        return dp[len1][len2];
    }
}
