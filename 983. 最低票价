class Solution {
    // 动态规划，从后往前计算
    // dp[i] 表示第 i 和以后所需最少花费，dp 长度为 days 最大值 + 31（或者更多）
    // 每次和 costs 的三种情况做个比较，例如：
    // 选择买一天通行证，则 dp[i] = costs[0] + dp[i + 1];
    // 因为之后一天内都可以不用买通行证，依次类推
    public int mincostTickets(int[] days, int[] costs) {
        int maxDay = days[days.length - 1];
        int minDay = days[0];
        int[] dp = new int[maxDay + 31];
        int i = maxDay;
        int index = days.length - 1;
        while (i >= minDay) {
            if (i == days[index]) {
                dp[i] = Math.min(costs[0] + dp[i + 1], costs[1] + dp[i + 7]);
                dp[i] = Math.min(dp[i], costs[2] + dp[i + 30]);
                index--;
            } else {
                // 表示第 i 天不出去，所以不用买证
                // 那么 dp[i] 就为其后一天的最少花费
                dp[i] = dp[i + 1];
            }
            i--;
        }
        return dp[minDay];
    }
}


