# dp
动态规划
class Solution {
    // 动态规划
    // dp[i][j]表示从(0,0)位置到(i,j)位置的最小路径和
    // 根据题意，每次只能移动至下一行的相同位置，或者下标 + 1 位置
    // 第一行有一个节点，第二行有两个节点，依次类推，第 n 行有第 n 个节点
    // 所以每一行的第一个位置和最后一个位置特殊处理
    // 其他位置的最短路径和为：上一行的同样位置或者同样位置 - 1，计算这两者的最小值 + 当前位置的值，就为该节点目前为止的最小路径和
    public int minimumTotal(List<List<Integer>> triangle) {
        int len = triangle.size();
        if (len == 0) {
            return 0;
        }
        int[][] dp = new int[len][len];
        dp[0][0] = triangle.get(0).get(0);
        for (int i = 1; i < len; i++) {
            dp[i][0] = dp[i - 1][0] + triangle.get(i).get(0);
            for (int j = 1; j < i; j++) {
                dp[i][j] = Math.min(dp[i - 1][j], dp[i - 1][j - 1]) + triangle.get(i).get(j);
            }
            dp[i][i] = dp[i - 1][i - 1] + triangle.get(i).get(i); 
        }
        int res = dp[len - 1][0];
        for (int i = 1; i < len; i++) {
            res = Math.min(res, dp[len - 1][i]);
        }
        return res;
    }
}

