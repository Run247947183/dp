# dp
动态规划
public class Solution {
    /**
     * @param m: An integer m denotes the size of a backpack
     * @param A: Given n items with size A[i]
     * @param V: Given n items with value V[i]
     * @return: The maximum value
     */
     // 动态规划
     // dp[i][j]表示已经有 i 个商品装入大小为 j 的背包的最大价值
     // 判断一个商品是不是要放入，或者能不能放入当前的背包，只有三种情况
     // 当前i商品的体积大于背包大小j，所以不能放入，则dp[i][j]为dp[i - 1][j]
     // 当有足够体积放入背包时又分为两种情况，第一种还是不将当前商品放入
     // 第二种，将当前商品放入，则就需要在放入和不放入之间进行价值的判断
    public int backPackII(int m, int[] A, int[] V) {
        // write your code here
        if (m == 0 || A.length == 0) {
            return 0;
        }
        int[][] dp = new int[A.length + 1][m + 1];
        for (int i = 0; i <= A.length; i++) {
            dp[i][0] = 0;
        }
        for (int i = 1; i <= m; i++) {
            dp[0][i] = 0;
        }
        for (int i = 1; i <= A.length; i++) {
            for (int j = 0; j <= m; j++) {
                if (A[i - 1] > j) {
                    dp[i][j] = dp[i - 1][j];
                } else {
                    int tmp = dp[i - 1][j - A[i - 1]] + V[i - 1];
                    dp[i][j] = Math.max(dp[i - 1][j], tmp);
                }
            }
        }
        return dp[A.length][m];
    }
}
