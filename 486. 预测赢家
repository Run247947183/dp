# dp
动态规划
class Solution {
    // 动态规划
    // 状态：dp[i][j] 表示区间为从i到j，当前一方和另一方的最大差值
    // 三种情况：（1）i > j，则 dp[i][j] = 0
    // （2）i == j，则 dp[i][j] = nums[i] ，只能选择nums[i] 
    // （3）i < j，则可以选择区间的 i ，也就是 nums[i]，也可以选择 j，也就是 nums[j]
    // 则最大值为 Math.max(nums[i] - dp[i + 1][j], nums[j] - dp[i][j - 1])
    public boolean PredictTheWinner(int[] nums) {
        if (nums == null || nums.length == 0) {
            return false;
        }
        int[][] dp = new int[nums.length][nums.length];
        for (int i = 0; i < nums.length; i++) {
            dp[i][i] = nums[i];
        }
        for (int i = nums.length - 2; i >= 0; i--) {
            for (int j = i + 1; j < nums.length; j++) {
                dp[i][j] = Math.max(nums[i] - dp[i + 1][j], nums[j] - dp[i][j-1]);
            }
        }
        return dp[0][nums.length - 1] >= 0;
    }
}
