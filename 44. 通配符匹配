# dp
动态规划
class Solution {
    // 动态规划
    // dp[i][j]表示s中前i个字母和p中前i个字母匹配
    // 分为三种情况，第一种 s.charAt(i) == p.charAt(j)，此时dp[i][j]=dp[i-1][j-1]
    // 第二种：p.charAt(i)=='?'，dp[i][j]也是dp[i-1][j-1]，因为?可以匹配任意字母
    // 第三种：p.charAt(i)=='*'，那么 * 可以用，也可以不用
    // 所以dp[i][j]分为两种情况：如果 * 使用来匹配字母，那么就等于dp[i - 1][j]
    public boolean isMatch(String s, String p) {
        if (s == null && p != null) {
            return false;
        }
        boolean[][] dp = new boolean[s.length() + 1][p.length() + 1];
        dp[0][0] = true;
        for (int i = 1;i <= p.length(); i++) {
            if (p.charAt(i - 1) == '*') {
                dp[0][i] = true;
            } else {
                break;
            }
        }
        for (int i = 1; i <= s.length(); i++) {
            for (int j = 1; j <= p.length(); j++) {
                if (s.charAt(i - 1) == p.charAt(j - 1) || p.charAt(j - 1) == '?') {
                    dp[i][j] = dp[i - 1][j - 1];
                }
                if (p.charAt(j - 1) == '*') {
                    if (dp[i - 1][j] || dp[i][j - 1]) {
                        dp[i][j] = true;
                    }
                }
            }
        }
        return dp[s.length()][p.length()];
    }
}
