# dp
动态规划
class Solution {
    // 动态规划
    // dp[i][j] 表示以(i,j)为右下角的正方形最大边长
    public int maximalSquare(char[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }
        int[][] dp = new int[matrix.length][matrix[0].length];
        int maxSize = 0;
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                if (matrix[i][j] == '1') {
                    if (i == 0 || j == 0) {
                        // 当遍历到第一行或者第一列，并且matrix[i][j]=='1'
                        dp[i][j] = 1;
                    } else {
                        // 为左上角，上方，左方的正方形边长最小值
                        // 这样才能满足一个正方形的要求
                        dp[i][j] = Math.min(dp[i-1][j-1],
                        Math.min(dp[i-1][j], dp[i][j-1])) + 1;
                    }
                }
                maxSize = Math.max(maxSize, dp[i][j]);
            }
        }
        return maxSize * maxSize;
    }
}
