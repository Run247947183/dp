

斐波那契数列定义：F(n)=F(n-1)+F(n-2)（n>=2，n∈N*），其中F(1)=1，F(2)=1
方法一：递归
*/
public class Solution {
public int Fibonacci(int n) {
// 初始值
if(n <= 0)
return 0;
if(n == 1 || n == 2)
return 1;
// F(n)=F(n-1)+F(n-2)
return Fibonacci(n - 1) + Fibonacci(n - 2);
}
}
/*
递归的方法时间复杂度为O(2^n)，随着n的增大呈现指数增长，效率低下
当输入比较大时，可能导致栈溢出
在递归过程中有大量的重复计算
*/
/*
方法二：动态规划
状态：F(n)
状态递推：F(n)=F(n-1)+F(n-2)
初始值：F(1)=F(2)=1
返回结果：F(N)
*/
public class Solution {
public int Fibonacci(int n) {
// 初始值
if(n <= 0)
return 0;
// 申请一个数组，保存子问题的解，题目要求从第0项开始
int[] array = new int[n + 1];
array[0] = 0;
array[1] = 1;
for(int i = 2; i <= n; ++i)
{
// F(n)=F(n-1)+F(n-2)
array[i] = array[i - 1] + array[i - 2];
}
return array[n];
}
}
/*
上述解法的空间复杂度为O(n)
其实F(n)只与它相邻的前两项有关，所以没有必要保存所有子问题的解
只需要保存两个子问题的解就可以
下面方法的空间复杂度将为O(1)
*/

题目描述
一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多
少种跳法。
int jumpFloorII(int number)

public class Solution {
public int Fibonacci(int n) {
// 初始值
if(n <= 0)
return 0;
if(n == 1 || n == 2)
return 1;
int ret = 0;
int fn1 = 1, fn2 = 1;
for(int i = 3; i <= n; ++i)
{
// F(n)=F(n-1)+F(n-2)
ret = fn1 + fn2;
// 更新值
fn2 = fn1;
fn1 = ret;
}
return ret;
}
}
