import java.util.*;

public class Main {
    // 使用 dfs深度优先搜索
    // 假设问题的解为F(n, m)，可分解为两个子问题 F(n-1, m-n)和F(n-1, m)
    // 例如现在计算从 1 到 5 中若干数字和为 5 的组合
    // 对于 1 元素来说，可以把 1 加入寻找和为 5 的组合，也可以不把 1 加入寻找后面和为 5 的组合
    // 如果放到结果中, 就相当于求 2...5 中取若干个数字和为 4. (即为F(n-1, m-n))
//  // 如果不放到结果中, 就相当于求 2...5 中取若干个数字和为 5. (即为F(n-1, m))
    public static ArrayList<ArrayList<Integer>> list = new ArrayList<>();
    public static ArrayList<Integer> tmp = new ArrayList<>();
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        while (in.hasNext()) {
            int n = in.nextInt();
            int m = in.nextInt();
            n = n > m ? m : n;
            dfs(1, m, n);
            for (int i = 0; i < list.size(); i++) {
                for (int j = 0; j < list.get(i).size(); j++) {
                    if (j != list.get(i).size() - 1) {
                        System.out.print(list.get(i).get(j) + " ");
                    } else {
                        System.out.println(list.get(i).get(j));
                    }
                }
            }
        }
    }
    public static void dfs(int tag, int m, int n) {
        if (m == 0) {
            list.add(new ArrayList<>(tmp));
        } else {
            for (int i = tag; i <= n; i++) {
                // 每次循环时为第二种子问题，也就是不把前面的 i 计算上
                // 直接从 2...n 中寻找和为 m 的组合
                tmp.add(i);
                // 从 i 往下递归寻找和为 m 的组合是子问题的一种
                // 也就是把 i 计算上，计算从 2...n 中和为 m 的组合
                dfs(i + 1, m - i, n);
                // 每次递归后每次都需要从 tmp 中删除掉加入的元素
                // 这样不影响第二个子问题的判断
                tmp.remove(tmp.size() - 1);
            }
        }
    }
}
