方法一
import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        while (in.hasNext()) {
            int n = in.nextInt();
            int[] arr = new int[n];
            for (int i = 0; i < n; i++) {
                arr[i] = in.nextInt();
            }
            int max = Integer.MIN_VALUE;
            int count = 0;
            for (int i = 0; i < n; i++) {
                if (count <= 0) {
                    count = arr[i];
                } else {
                    count += arr[i];
                }
                max = max > count ? max : count;
            }
            System.out.println(max);
        }
    }
}

方法二
class Solution {
    public int maxSubArray(int[] nums) {
        if (nums.length == 1) {
            return nums[0];
        }
        int max = nums[0];
        int count = nums[0];
        for (int i = 1; i < nums.length; i++) {
            if (count + nums[i] < nums[i]) {
                count = nums[i];
            } else {
                count += nums[i];
            }
            max = Math.max(max, count);
        }
        return max;
    }
}

方法三：动态规划
public class Solution {
    public int FindGreatestSumOfSubArray(int[] array) {
        if (array.length == 0) {
            return 0;
        }
        int[] dp = new int[array.length];
        dp[0] = array[0];
        int max = dp[0];
        for (int i = 1; i < array.length; i++) {
            dp[i] = Math.max(dp[i - 1] + array[i], array[i]);
            if (max < dp[i]) {
                max = dp[i];
            }
        }
        return max;
    }
}
