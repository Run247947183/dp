class Solution {
    // 动态规划
    public int maxProfit(int k, int[] prices) {
        if (prices == null || prices.length == 0 || k == 0) {
            return 0;
        }
        // 超过了长度一半，表示等于无限次数买卖交易
        if (k > prices.length / 2) {
            return helper(prices);
        }
        int[][] dp = new int[k][2];
        // 初始化，这样即使计算出是负值，也能按照这个值往下推算
        for (int i = 0; i < k; i++) {
            dp[i][0] = Integer.MIN_VALUE;
        }
        // 每一次的股票交易，都需要按照前一次股票交易的情况去判断
        // 所以遍历每一次股票从第 1 次到第 k 次交易的情况，这样才能根据前一次交易情况动态的选择最好的情况
        for (int num : prices) {
            dp[0][0] = Math.max(dp[0][0], -num); // 第一天买入
            dp[0][1] = Math.max(dp[0][1], dp[0][0] + num); // 第一天卖出
            for (int i = 1; i < k; i++) {、
                // 第 i 天买入
                dp[i][0] = Math.max(dp[i][0], dp[i - 1][1] - num);
                // 第 i 天卖出
                dp[i][1] = Math.max(dp[i][1], dp[i][0] + num);
            }
        }
        int res = 0;
        // 找到卖出股票中的最大值，因为买入的时候不可能是最大值
        for (int i = 0; i < k; i++) {
            res = Math.max(dp[i][1], res);
        }
        return res;
    }
    // 无限次数买卖交易
    public int helper(int[] arr) {
        int minBuy = 0;
        int maxSale = 0;
        int i = 0;
        int sum = 0;
        while (i < arr.length - 1) {
            while (i < arr.length - 1 && arr[i] >= arr[i + 1]) {
                i++;
            }
            minBuy = arr[i];
            while (i < arr.length - 1 && arr[i] <= arr[i + 1]) {
                i++;
            }
            maxSale = arr[i];
            sum += (maxSale - minBuy);
        }
        return sum;
    }
}
