# dp
动态规划
class Solution {
    // 动态规划
    // dp[i][j] 表示从0到i范围内，状态为j时的最大化收益，一共五种状态
    // dp[i][0] 表示既不买股票，也不卖股票，也就是什么都不做的情况
    // dp[i][1] 表示第一次购买股票
    // dp[i][2] 表示第一次出售股票
    // dp[i][3] 表示第二次购买股票
    // dp[i][4] 表示第二次出售股票
    public int maxProfit(int[] prices) {
        int len = prices.length;
        if (len < 2) {
            return 0;
        }
        int[][] dp = new int[len][5];
        dp[0][1] = -prices[0];
        // 注意：因为第二次购买均处于不可能状态，所以赋值最小值
        // 这样第二次真正购买的时候，才能正确赋值
        for (int i = 0; i < len; i++) {
            dp[i][3] = Integer.MIN_VALUE;
        }
        for (int i = 1; i < len; i++) {
            dp[i][0] = 0;
            dp[i][1] = Math.max(dp[i - 1][0] - prices[i], dp[i - 1][1]);
            dp[i][2] = Math.max(dp[i - 1][2], dp[i - 1][1] + prices[i]);
            dp[i][3] = Math.max(dp[i - 1][2] - prices[i], dp[i - 1][3]);
            dp[i][4] = Math.max(dp[i - 1][4], dp[i - 1][3] + prices[i]);
        }
        return Math.max(0, Math.max(dp[len - 1][2], dp[len - 1][4]));
    }
}
