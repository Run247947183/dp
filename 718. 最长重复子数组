class Solution {
    // 动态规划
    // 二维 dp 数组长度为 A 和 B 长度 + 1
    // dp[i][j] 表示 A[i] 和 B[j] 相同
    // 从前往后遍历，dp[0][0] 为 1，其中转移方程为 dp[i + 1][j + 1] = dp[i][j] + 1;
    // 表示当前两个元素相同，那么要判断之前连续位置元素是否相同
    // 每次判断完需要更新 max 最大值
    public int findLength(int[] A, int[] B) {
        int max = 0;
        int[][] dp = new int[A.length + 1][B.length + 1];
        for (int i = 0; i < A.length; i++) {
            for (int j = 0; j < B.length; j++) {
                if (A[i] == B[j]) {
                    dp[i + 1][j + 1] = dp[i][j] + 1; 
                }
                max = Math.max(max, dp[i + 1][j + 1]);
            }
        }
        return max;
    }
}
