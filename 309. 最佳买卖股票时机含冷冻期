# dp
动态规划
class Solution {
    // 动态规划
    // dp[i][0]表示第i天持有股票的最大化收益
    // dp[i][1]表示第i天不持有股票，并且处于冷冻期的最大化收益
    // dp[i][2]表示第i天不持有股票，并且不处于冷冻期的最大化收益
    // 转移方程
    // dp[i][0]:当第i-1天持有股票的最大化收益，或者是第i-1天不持有股票但是第i天买入股票
    // dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][2] - prices[i])
    // dp[i][1]:当第i-1天必须持有股票，并且卖出的情况
    // dp[i][1] = dp[i - 1][0] + prices[i]
    // dp[i][2]:当第i-1天不持有股票并且也不处于冷冻期的最大化收益，或者是第i-1天处于冷冻期的最大化收益
    // dp[i][2] = Math.max(dp[i - 1][2], dp[i - 1][1])
    public int maxProfit(int[] prices) {
        int[][] dp = new int[prices.length][3];
        if (prices.length == 0 || prices.length == 1) {
            return 0;
        }
        dp[0][0] = -prices[0];
        for (int i = 1; i < prices.length; i++) {
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][2] - prices[i]);
            dp[i][1] = dp[i - 1][0] + prices[i];
            dp[i][2] = Math.max(dp[i - 1][2], dp[i - 1][1]);
        }
        return Math.max(dp[prices.length - 1][1], dp[prices.length - 1][2]);
    }
}
