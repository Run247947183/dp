class Solution {
    // 动态规划
    // dp[i][0]表示第i天持有股票的最大化收益
    // dp[i][1]表示第i天卖出股票的最大化收益
    // dp[i][2]表示第i天不持有股票也不处于冷冻期的最大化收益，或者第i天不持有股票但是处于冷冻期的最大化收益
    public int maxProfit(int[] prices) {
        if (prices == null || prices.length == 0) {
            return 0;
        }
        int[][] dp = new int[prices.length][3];
        dp[0][0] = -prices[0];
        for (int i = 1; i < prices.length; i++) {
            // 前一天的持有股票和前一天不持有股票（这里无论前一天不持有股票是不是处于冷冻期，到了今天都可以够买股票），两者的对比
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][2] - prices[i]);
            // 表示前一天持有股票卖出的最大化收益
            dp[i][1] = dp[i - 1][0] + prices[i];
            // 表示前一天不持有股票，和前一天卖出股票（如果前一天卖出股票，那么今天就是处于不持有股票的冷冻期状态），两者对比
            dp[i][2] = Math.max(dp[i - 1][2], dp[i - 1][1]);
        }
        // 最后答案一定是不持有股票和刚卖出股票的最大值，如果持有股票会减去股票的价格，肯定不可能是最大值
        return Math.max(dp[prices.length - 1][1], dp[prices.length - 1][2]);
    }
}
